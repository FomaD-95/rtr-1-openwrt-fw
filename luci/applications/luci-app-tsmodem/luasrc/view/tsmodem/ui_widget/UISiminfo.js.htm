<%

local util = require "luci.util"
local ubus_sim = util.ubus("tsmodem.driver", "sim", {})
local sim_id = ubus_sim["value"]

%>

<script type="text/javascript">
//<![CDATA[
	L.require('ui').then(function(ui) {
		L.require('dom').then(function(dom) {
		// 	uci.load("tsmodem").then(function(out){
				var UISiminfo = ui.AbstractElement.extend({
					__init__: function(simname, options) {
		                this.simid = options.simid
		                this.name = options.name
		                this.provider = options.provider

						this.cpin = options.cpin
						this.netreg = options.netreg
						this.lastreg_timer = 0
						this.netreg_timeout = null

						this.ping_status = options.ping_status
						this.lastping_timeout = null
						this.lastping_timer = 0

		                this.netmode = options.netmode

						this.signal = options.signal
						this.lowsignal_timer = 0
						this.signal_min = null
						this.lowsignal_timeout = null

						this.balance = options.balance
						this.lowbalance_timer = 0
						this.balance_datetime = ""
						this.lowbalance_timeout = null

						this.is_switching = "false"

						this.countdown = {}

						var self = this
						L.require("uci").then(function(uci) {
							uci.load("tsmodem").then(function(out){
								self.name = uci.get("tsmodem", "sim_" + self.simid, "name")

								self.signal_min = uci.get("tsmodem", "sim_" + self.simid, "signal_min")
								self.lowsignal_timeout = uci.get("tsmodem", "sim_" + self.simid, "timeout_signal")

								self.cpin_timeout = uci.get("tsmodem", "default", "timeout_sim_absent")
								self.netreg_timeout = uci.get("tsmodem", "sim_" + self.simid, "timeout_reg")
								self.lowbalance_timeout = uci.get("tsmodem", "sim_" + self.simid, "timeout_bal")
								self.lastping_timeout = uci.get("tsmodem", "sim_" + self.simid, "timeout_ping")

							});
						});

						this.chunk = {
							simid: E('div', {class: 'td', ["data-title"]: 'N'}, E('div', {}, this.simid)),
							name: E('div', {class: 'td sim_name', style: "white-space: nowrap;", ["data-title"]: this.name}, [
										this.name,
										E('i', {class: "provider_name"}, " ")
		                    ]),
							cpin: E('div', {class: 'td cpin_status', ["data-title"]: this.cpin}, E('div', { style: "width: 53px;"}, " ")),
							netreg: E('div', {class: 'td network_registration', style: "width: 170px;", ["data-title"]: this.netreg}, E('div', { style: "width: 60px;"}, " ")),
							ping_status: E('div', {class: 'td ping_status', ["data-title"]: this.ping_status}, E('div', { style: "width: 53px;"}, this.ping_status)),
							netmode: E('div', {class: 'td netmode_comment', style: "white-space: nowrap;", ["data-title"]: this.netmode}, E('div', {}, this.netmode)),
							signal: E('div', {class: 'td signal', ["data-title"]: this.signal}, E('div', { style: "width: 53px;"}, this.signal)),
							balance: E('div', {class: 'td sim_balance', style: "white-space: nowrap;", ["data-title"]: this.balance}, E('div', {}, this.balance)),
							btn_activate: E('input',  {
												type: "button", class: "cbi-button cbi-button-apply sim-" + this.simid,
												["data-simid"]: this.simid,
												value: _("Activate"),
												style: "display: initial;",
							}),

							btn_balance: E('input',  {
									type: "button", class: "cbi-button cbi-button-apply sim-" + this.simid + "-balance",
									["data-simid"]: this.simid,
									value: _("Баланс"),
									style: "display: initial; width: 90px;",
							}),

							btn_setting: E('input',  {
												type: "button", class: "cbi-button cbi-button-apply sim-" + this.simid + "-settings",
												["data-simid"]: this.simid,
												value: _("Settings"),
												style: "display: initial;",
							}),
							btn_console: E('input',  {
			                                    type: "button", class: "cbi-button cbi-button-apply webconsole simid-" + this.simid,
			                                    ["data-simid"]: this.simid,
			                                    value: _("AT console"),
			                                    style: "display: initial;"
		                    }),
							spinner: E('img', {
								src: "<%=resource%>/icons/loading.gif",
								alt: "<%:Loading%>",
								width: 16,
								style: "vertical-align:middle"
							})
						}


						// Disable "Activate" button for currently active Sim card
						var active_sim_id = parseInt("<%=sim_id %>") || null
						if (active_sim_id == this.simid) {
							this.chunk.btn_activate.setAttribute("disabled", "disabled");
						}

						// Disable "Balance" button for another, non-active Sim card
						if (active_sim_id != this.simid) {
							this.chunk.btn_balance.setAttribute("disabled", "disabled");
						}

					},

					render: function() {
		                var container = E('div', { id: 'simid-' + this.simid, class: 'tr cbi-rowstyle-' + this.simid }, [
		                    this.chunk.simid,
							this.chunk.name,
							this.chunk.cpin,
							this.chunk.netreg,
							this.chunk.ping_status,
							this.chunk.netmode,
							this.chunk.signal,
							this.chunk.balance,
		                    E('div', {class: "nowrap cbi-section-actions td", style: "text-align: right;"}, [
		                        this.chunk.btn_activate,
								this.chunk.btn_balance,
								this.chunk.btn_setting,
								this.chunk.btn_console,
		                    ])
		                ])


						return this.bind(container);
					},

					// Fire events issued from UISiminfo widget
					fireEvent: function(event_name, event_data) {
						var s = new CustomEvent(event_name, {
							detail: event_data,
							bubbles: true,
						})
						if(window.EventBus.busobjects["UISiminfo_"+this.simid]) {
							window.EventBus.busobjects["UISiminfo_"+this.simid].dispatchEvent(s);
						}
					},

					// Clear Siminfo row when do_switch event or btn_activate pressed
					clearInfo: function(simid) {

						// Clear table row for non-active Sim-card
						var chunk_update = E('div', {}, " ")
						var node_pointer = "#" + simid + " div.cpin_status"
						console.log(node_pointer, $(node_pointer))
						$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

						var chunk_update = E('div', {}, " ")
						node_pointer = "#" + simid + " div.network_registration"
						$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

						chunk_update = E('div', {}, " ")
						node_pointer = "#" + simid + " div.ping_status"
						$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

						chunk_update = E('div', {}, " ")
						node_pointer = "#" + simid + " div.netmode_comment"
						$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

						chunk_update = E('div', {}, " ")
						node_pointer = "#" + simid + " div.signal"
						$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)


						// Disable Balance buttons while sim is switching
						$(".cbi-button.cbi-button-apply.sim-0-balance").prop( "disabled", true );
						$(".cbi-button.cbi-button-apply.sim-1-balance").prop( "disabled", true );

						// Disable AT-console button as soon as Sim activation buton pressed
						$(".webconsole").prop( "disabled", true );

						// Remove all countdowns
						if (self.countdown) {
							if (self.countdown["cdown-cpin"]) self.countdown["cdown-cpin"].onTimesUp();
							if (self.countdown["cdown-netreg"]) self.countdown["cdown-netreg"].onTimesUp();
							if (self.countdown["cdown-ping"]) self.countdown["cdown-ping"].onTimesUp();
							if (self.countdown["cdown-balance"]) self.countdown["cdown-balance"].onTimesUp();
							if (self.countdown["cdown-signal"]) self.countdown["cdown-signal"].onTimesUp();


							self.countdown = {}
						}
					},

					bind: function(container) {
						this.node = container
						var self = this
						dom.bindClassInstance(container, this);

						// Register events object which will represent UISiminfo widget on the Event Bus
						window.EventBus.registerTo(this.node,"UISiminfo_"+this.simid)

						if(this.chunk) {
							this.chunk.btn_setting.onclick = function(){
								self.fireEvent("btn_setting_pressed", {
									simid: self.simid
								})
							}

							this.chunk.btn_activate.onclick = function(){
								self.fireEvent("btn_activate_pressed", {
									simid: self.simid,
									uuid: uuid(),
								})
								self.chunk.btn_activate.disabled = true
							}

							this.chunk.btn_balance.onclick = function(e) {
								var node_pointer = "#simid-" + self.simid + " div.sim_balance"
								var chunk_update = E('div', {class: 'td sim_balance', style: "white-space: nowrap;", ["data-title"]: this.balance}, E('div', {}, " "))
								$(node_pointer).replaceWith(chunk_update)

								self.fireEvent("btn_balance_pressed", {
									simid: self.simid,
									uuid: uuid(),
								})

								self.chunk.btn_balance.setAttribute("disabled", "disabled");
								spinner2($(node_pointer), 1)

							}

							this.chunk.btn_console.onclick = function(){
								// self.fireEvent("btn_activate_pressed", {
								// 	simid: self.simid,
								// 	uuid: uuid(),
								// })
								// self.chunk.btn_activate.disabled = true
								self.fireEvent("btn_console_pressed", {
									simid: self.simid
								})
							}
						}

						// ---------------------------------------------------
						// Activate button pressed on another UISiminfo widget
						// ---------------------------------------------------
						window.EventBus.listenToASAP("UISiminfo_0", ["btn_activate_pressed"], function(ev) {
							var event_data = ev.detail || {}

							console.log("UISiminfo_0")

							self.clearInfo("simid-0")
							self.clearInfo("simid-1")

						})


						// ---------------------------------------------------
						// Activate button pressed on another UISiminfo widget
						// ---------------------------------------------------
						window.EventBus.listenToASAP("UISiminfo_1", ["btn_activate_pressed"], function(ev) {
							var event_data = ev.detail || {}

							console.log("UISiminfo_1")


							self.clearInfo("simid-0")
							self.clearInfo("simid-1")

						})

						// -----------------------------------------------
						// 01_rule UI updates: Sim is in slot or not
						// -----------------------------------------------
						window.EventBus.listenToASAP("websocket", ["01_rule"], function(ev) {
							var event_data = ev.detail || {}
							var chunk_update = self.chunk.cpin;

							var currently_activated_sim_id = event_data["sim_id"] && parseInt(event_data["sim_id"])
							if(currently_activated_sim_id == self.simid) {

								if(event_data && event_data.timer) {

									// Update sim-in-slot state
									self.sim_ready = event_data.sim_ready || " "
									self.cpin_timeout = event_data.uci_timeout_sim_absent
									self.cpin_timer = parseInt(event_data.timer)

									var SIM_READY = (self.sim_ready == "true")
									var SIM_ABSENT = (self.sim_ready == "false")
									var SIM_CHECKING = (self.sim_ready == " ")

									var node_pointer = "#simid-" + self.simid + " div.cpin_status"

									if (SIM_READY) {
											chunk_update = E('font', {style: "color: green; font-weight: bolder;"}, "OK")

											$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

											if (self.countdown["cdown-cpin"]) {
												self.countdown["cdown-cpin"].onTimesUp()
												self.countdown["cdown-cpin"] = null
											}
									} else if (SIM_CHECKING) {
										chunk_update = self.chunk.spinner;
										$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

									} else if (SIM_ABSENT) {
										chunk_update = E('font', {style: "color: red; font-weight: bolder;"}, "No")

										$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

										if (self.cpin_timer && self.cpin_timer > 5) {
											// Show countdown progress if SIM isn't in slot
											if (!self.countdown["cdown-cpin"]) {
												var title = "Нет сим-карты в слоте № " + self.simid
												var description = "В слоте № " + self.simid + " не обнаружена Сим-карта. Вставьте сим-карту до истечения таймера, или дождитесь переключения модема на другой слот."

												self.countdown["cdown-cpin"] = new ui.Countdown("cdown-cpin", self.cpin_timeout, self.cpin_timer, title, description)
												$('#ui-countdown').append(self.countdown["cdown-cpin"].render())
											}
										}
									}
								} else {
									chunk_update = E('font', {style: "color: red; font-weight: bolder;"}, " ")

									var node_pointer = "#simid-" + self.simid + " div.cpin_status"
									$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

									if (self.countdown["cdown-cpin"]) {
										self.countdown["cdown-cpin"].onTimesUp()
										self.countdown["cdown-cpin"] = null
									}
								}
							// Clear CPIN state of non-activated row (UISiminfo) as we can't know whether Sim-card exists in non-active slot or not
							} else if(currently_activated_sim_id != self.simid) {
								chunk_update = E('font', {style: "color: red; font-weight: bolder;"}, " ")

								var node_pointer = "#simid-" + self.simid + " div.cpin_status"
								$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

							}
						});

						// -----------------------------------------------
						// 02_rule UI updates: Network registration status
						// -----------------------------------------------
						window.EventBus.listenToASAP("websocket", ["02_rule"], function(ev) {
							var event_data = ev.detail || {}
							if(event_data["sim_id"] && event_data["sim_id"] == self.simid) {

								var network_state = {
									"-1": ["<%:Sim not inserted %>", "SIM NOT INSERTED"],
									"0": ["<%:Not registered %>", "NOT REGISTERED"],
									"1": ["<%:Active %>", "REGISTERED"],
									"2": ["<%:Searching %>", "SEARCHING"],
									"3": ["<%:Denied %>", "DENIED"],
									"4": ["<%:Unknown %>", "UNKNOWN"],
									"5": ["<%:Active-roaming %>", "ROAMING"],
									"6": ["<%:Not active %>", "OK"],
									"7": ["<%:Switching ttyUSB2 %>", "UNKNOWN"]
								}

																var chunk_update = self.chunk.netreg;

								// Update net registration state
								self.netreg = parseInt(event_data.network_registration)
								self.lastreg_timer = parseInt(event_data.lastreg_timer)

								var bgIcon_Y = -(self.netreg * 15) // see www/luci-static/resources/ts_skw92a/img/icon_reg_status.png

								if(self.netreg != 1) {
									if(self.lastreg_timer > 60) {
										 chunk_update = E('i', { style: "background-position: 0 " + bgIcon_Y + "px; color: red;" }, [
											 network_state[self.netreg.toString()][0],
											 E('div', { class: "spinner-reg-"+self.simid, style: "display: inline-block; margin-left: 4px;"})
										 ])

										 var node_pointer = "#simid-" + self.simid + " div.network_registration"
										 $(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

										// Show countdown progress if no registration
										if (!self.countdown["cdown-netreg"]) {
											var title = "Нет регистрации в сети"
											var description = "Проверьте настройки, убедившись что они соответствуют вставленной в слот Сим-карте. При отсутствии регистрации Сим-карта будет переключена по истечении таймера."

											self.countdown["cdown-netreg"] = new ui.Countdown("cdown-netreg", self.netreg_timeout, self.lastreg_timer, title, description)
											$('#ui-countdown').append(self.countdown["cdown-netreg"].render())
										}
									} else {
										chunk_update = E('i', { style: "background-position: 0 " + bgIcon_Y + "px;" }, [
											network_state[self.netreg.toString()][0],
											E('div', { class: "spinner-reg-"+self.simid, style: "display: inline-block; margin-left: 4px;"})
										])
										var node_pointer = "#simid-" + self.simid + " div.network_registration"
										$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

										if (self.countdown["cdown-netreg"]) {
											self.countdown["cdown-netreg"].onTimesUp()
											self.countdown["cdown-netreg"] = undefined
										}
									}
									spinner2($(".spinner-reg-"+self.simid), 1)

								} else {
									chunk_update = E('i', { style: "background-position: 0 " + bgIcon_Y + "px;" }, [
										network_state[self.netreg.toString()][0],
										E('div', { class: "spinner-reg-"+self.simid, style: "display: inline-block; margin-left: 4px;"})
									])
									var node_pointer = "#simid-" + self.simid + " div.network_registration"
									$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

									if (self.countdown["cdown-netreg"]) {
										self.countdown["cdown-netreg"].onTimesUp()
										self.countdown["cdown-netreg"] = undefined
									}
									spinner2($(".spinner-reg-"+self.simid), 0)
								}

							}
							var currently_activated_sim_id = event_data["sim_id"] && parseInt(event_data["sim_id"])
							if(currently_activated_sim_id != self.simid) {
								$(".cbi-button.cbi-button-apply.sim-" + self.simid + "-balance").prop( "disabled", true );
							}

							// Enable AT-console button as soon as sim switched
							if (parseInt(self.netreg) && parseInt(self.netreg) >= 0 && parseInt(self.netreg) != 7) {
								$(".webconsole.simid-" + self.simid).prop( "disabled", false );
							}

							if(currently_activated_sim_id != self.simid) {
								$(".webconsole.simid-" + self.simid).prop( "disabled", true );
							}
						})

						// ---------------------------------------
						// 03_rule UI updates: Balance on Sim card
						// ---------------------------------------
						window.EventBus.listenToASAP("websocket", ["03_rule"], function(ev) {
							var event_data = ev.detail || {}
							var node_pointer = "#simid-" + self.simid + " div.sim_balance"
							if(event_data["sim_id"] && event_data["sim_id"] == self.simid) {

								// var balance_state = {
								// 	["-998"]: "<%:USSD response doesn't look like balance message %><br /><%:Please check USSD-command or template. %>",
								// 	["-999"]: "<%:GSM provider cancels USSD session. %> <br /><%:We will get the balance later. %>",
								// 	["-9999"]: "in progress",
								// }
								var balance_state = {
									["-998"]: " ",
									["-999"]: " ",
									["-9999"]: "in progress",
								}
								var chunk_update = self.chunk.balance;

								self.balance = parseInt(event_data.sim_balance) || " "
								self.balance_datetime = event_data.event_datetime || self.balance_datetime || " "
								self.lowbalance_timer = event_data.lowbalance_timer || self.lowbalance_timer || 0


								if(self.balance != " ") {
									self.chunk.btn_balance.removeAttribute("disabled");

									if(self.balance == -999) {
										chunk_update = E('div', { class: "td sim_balance", style: "white-space: nowrap;", ["data-title"]: self.balance }, [
											E('small', { style: "color: red;" }, balance_state["-999"])
										])
										$(node_pointer).replaceWith(chunk_update)

									} else if(self.balance == -998) {
										chunk_update = E('div', { class: "td sim_balance", style: "white-space: nowrap;", ["data-title"]: self.balance }, [
											E('small', { style: "color: red;" }, balance_state["-998"])
										])
										$(node_pointer).replaceWith(chunk_update)

									} else if (self.balance == -9999) {
										chunk_update = E('div', { class: "td sim_balance", style: "white-space: nowrap;", ["data-title"]: " " })
										$(node_pointer).replaceWith(chunk_update)
										spinner2($(node_pointer), 1)
										$(".cbi-button.cbi-button-apply.sim-" + self.simid + "-balance").prop( "disabled", true );
									} else {

										if (self.lowbalance_timer > 0) {

											chunk_update = E('div', { class: "td sim_balance", style: "white-space: nowrap; color: red;", ["data-title"]: self.balance }, [
												self.balance,
												E('br'),
												E('small', {}, self.balance_datetime)
											])
											$(node_pointer).replaceWith(chunk_update)

											// Show countdown progress if low balance
											if (!self.countdown["cdown-balance"]) {
												var title = "Баланс на Сим-карте ниже минимума"
												var description = "Если не пополнить баланс или не изменить минимум в настройках, то по истечении таймера Сим-карта будет переключена."
												self.countdown["cdown-balance"] = new ui.Countdown("cdown-balance", self.lowbalance_timeout, self.lowbalance_timer, title, description)
												$('#ui-countdown').append(self.countdown["cdown-balance"].render())
											}
										} else {
											// balance: E('div', {class: 'td sim_balance', style: "white-space: nowrap;", ["data-title"]: this.balance}, E('div', {}, this.balance)),

											chunk_update = E('div', { class: "td sim_balance", style: "white-space: nowrap;", ["data-title"]: self.balance }, [
												self.balance,
												E('br'),
												E('small', {}, self.balance_datetime)
											])
											$(node_pointer).replaceWith(chunk_update)

											if (self.countdown["cdown-balance"]) {
												self.countdown["cdown-balance"].onTimesUp()
												self.countdown["cdown-balance"] = null
											}
										}
									}
								}
							}
						})

						// ---------------------------------------
						// 04_rule UI updates: PING
						// ---------------------------------------
						window.EventBus.listenToASAP("websocket", ["04_rule"], function(ev) {
							var event_data = ev.detail || {}
							var chunk_update = self.chunk.ping_status;

							if(event_data["sim_id"] && event_data["sim_id"] == self.simid) {

								if(event_data && event_data.lastping_timer) {

									self.ping_status = event_data.ping_status || " "
									self.lastping_timer = event_data.lastping_timer

									var NETREG_OK = (self.netreg == 1)

									if (NETREG_OK) {
										var PING_OK = (self.lastping_timer && (self.lastping_timer <= 0))
										if (PING_OK) {
											chunk_update = E('font', {style: "color: green; font-weight: bolder;"}, "OK")

											var node_pointer = "#simid-" + self.simid + " div.ping_status"
											$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

											if (self.countdown["cdown-ping"]) {
												self.countdown["cdown-ping"].onTimesUp()
												self.countdown["cdown-ping"] = null
											}
										} else {
											chunk_update = E('font', {style: "color: red; font-weight: bolder;"}, "No")

											var node_pointer = "#simid-" + self.simid + " div.ping_status"
											$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

											if (self.lastping_timer > 5) {
												// Show countdown progress if No ping
												if (!self.countdown["cdown-ping"]) {
													var title = "Нет пинга сети"
													var description = "Сим-карта зарегистрирована в сети, но доступ в сеть интернет отсутствует. Проверьте баланс Сим-карты, либо настройки сети."
													self.countdown["cdown-ping"] = new ui.Countdown("cdown-ping", self.lastping_timeout, self.lastping_timer, title, description)
													$('#ui-countdown').append(self.countdown["cdown-ping"].render())
												}
											}
										}
									} else {
										chunk_update = E('font', {style: "color: red; font-weight: bolder;"}, " ")

										var node_pointer = "#simid-" + self.simid + " div.ping_status"
										$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

										if (self.countdown["cdown-ping"]) {
											self.countdown["cdown-ping"].onTimesUp()
											self.countdown["cdown-ping"] = null
										}

									}
								}


							}
						})

						// ---------------------------------------
						// 05_rule UI updates: Signal level
						// ---------------------------------------
						window.EventBus.listenToASAP("websocket", ["05_rule"], function(ev) {
							var event_data = ev.detail || {}
							var chunk_update = self.chunk.signal;

							if(event_data["sim_id"] && event_data["sim_id"] == self.simid) {

								self.signal = parseInt(event_data.signal) || 0
								self.lowsignal_timer = parseInt(event_data.low_signal_timer) || 0
								var NETREG_OK = (self.netreg == 1)


								var SIGNAL_OK = (self.signal > 0)
								var LOWSIGNAL_TIMER_IS_ZERO = (self.lowsignal_timer <=0 )
								if (LOWSIGNAL_TIMER_IS_ZERO) {
									chunk_update = E('div', {}, self.signal + " %")

									var node_pointer = "#simid-" + self.simid + " div.signal"
									$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

									if (self.countdown["cdown-signal"]) {
										self.countdown["cdown-signal"].onTimesUp()
										self.countdown["cdown-signal"] = undefined
									}

								} else {
									chunk_update = E('div', { style: "color: red;"}, self.signal + " %")

									var node_pointer = "#simid-" + self.simid + " div.signal"
									$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)

									if(self.lowsignal_timer > 5) {
										// Show countdown progress if low signal
										if (!self.countdown["cdown-signal"]) {
											var title = "Сигнал базовой станции ниже минимума"
											var description = "Устройство находится в зоне слабого сигнала. По истечении таймера Сим-карта будет переключена. Проверьте минимальный порог переключения в настройках Сим-карты."
											self.countdown["cdown-signal"] = new ui.Countdown("cdown-signal", self.lowsignal_timeout, self.lowsignal_timer, title, description)
											$('#ui-countdown').append(self.countdown["cdown-signal"].render($(node_pointer)))
										}
									}
								}
							}
						})

						// -------------------------------------------
						// 07_rule UI updates: Network mode indication
						// -------------------------------------------
						window.EventBus.listenToASAP("websocket", ["07_rule"], function(ev) {
							var event_data = ev.detail || {}
							var chunk_update = self.chunk.provider;

							if(event_data["sim_id"] && event_data["sim_id"] == self.simid) {

								self.netmode = event_data.netmode || " "

								chunk_update = E('div', { style: "color: black;"}, self.netmode)

								var node_pointer = "#simid-" + self.simid + " div.netmode_comment"
								$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)



							}
						})


						// ------------------------------------------------
						// 14_rule UI updates: Provider name identification
						// ------------------------------------------------
						window.EventBus.listenToASAP("websocket", ["14_rule"], function(ev) {
							var event_data = ev.detail || {}
							var chunk_update = self.chunk.provider;

							if(event_data["sim_id"] && event_data["sim_id"] == self.simid) {
								self.provider = event_data.provider_name || " "

								chunk_update = E('div', { class: "td sim_name", style: "white-space: nowrap;", ["data-title"]: self.name }, [
									self.name,
									E('br'),
									E('small', {}, self.provider)
								])

								var node_pointer = "#simid-" + self.simid + " .sim_name"
								$(node_pointer).replaceWith(chunk_update)


							}
						})

						// -------------------------------------------------------
						// tsmconsole UI updates: Activate button enable / disable
						//
						// If UIWebSocket fires "ubus" event with "do_switch" method, then
						// we disable "Activate" buttons for both Sim cards
						// -------------------------------------------------------
						window.EventBus.listenToASAP("websocket", ["ubus"], function(ev) {
							var event_data = ev.detail || {}
							var chunk_update = self.chunk.btn_activate;

							// Disable "Activate" buttons, once do_switch ubus method requested
							if(event_data && event_data["command"] && event_data["command"] == "do_switch") {
								$(".cbi-button.cbi-button-apply.sim-" + self.simid).prop("disabled", true)
							}
						})


						// -----------------------------------------------------------
						// 99_rule UI updates: UICover hide / show, clear Siminfo rows

						// IF UIWebSocket fires "99_rule" event with "switching=false", then
						// we enable another Sim card (not-active currently)
						// -----------------------------------------------------------
						window.EventBus.listenToASAP("websocket", ["99_rule"], function(ev) {
							var event_data = ev.detail || {}
							if(event_data["sim_id"] && event_data["sim_id"] == self.simid) {

								// Clear table row when start switching
								self.is_switching = event_data["switching"]

								if(self.is_switching == "true") {
									self.clearInfo("simid-0")
									self.clearInfo("simid-1")
								}

							}

							// Enable "Activate" button for that Sim card which is not currently activated
							if(self.is_switching == "false") {
								var currently_activated_sim_id = event_data["sim_id"] && parseInt(event_data["sim_id"])

								if(currently_activated_sim_id != self.simid) {

									$(".cbi-button.cbi-button-apply.sim-" + self.simid).prop("disabled", false)
									$(".cbi-button.cbi-button-apply.sim-" + currently_activated_sim_id).prop("disabled", true)

									// Clear Sim connection state for non-active SIM
									var chunk_update = E('div', {}, [
										" ",
										E('div', { class: "spinner-reg-"+self.simid, style: "display: inline-block; margin-left: 4px;"})
									])
									var node_pointer = "#simid-" + self.simid + " div.network_registration"
									$(node_pointer)[0].firstChild.firstChild.replaceWith(chunk_update)
								}
							}
						});

						return container;
					},

				});

				ui["Siminfo"] = UISiminfo;
		// 	});
		});
	});

//]]>
</script>
