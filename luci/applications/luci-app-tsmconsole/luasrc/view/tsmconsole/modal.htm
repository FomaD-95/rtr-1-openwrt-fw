<%
	local config = "wsubus"
	local uci = require "luci.model.uci".cursor()
	local util = require "luci.util"
	local log = require "tsmodem.util.log"
%>

<%+tsmconsole/modal.css%>
<%+tsmconsole/utils/external.js%>
<%+tsmconsole/template/modal.js%>



<script type="text/javascript">
//<![CDATA[

var welcome = `
██████  ██ ████████  ██████  ██████  ██████  ██████
██   ██ ██    ██    ██      ██    ██ ██   ██ ██   ██
██████  ██    ██    ██      ██    ██ ██████  ██   ██
██   ██ ██    ██    ██      ██    ██ ██   ██ ██   ██
██████  ██    ██     ██████  ██████  ██   ██ ██████
`;

window.socket_at = new WebSocket("ws://192.168.1.1:7890");

function stop_modem_automation() {
	L.require("rpc").then(function(rpc){
		var rpc_sess = rpc.getSessionID()
		if(window.socket_at) {
			window.socket_at.send(JSON.stringify({
				driver_command: "driver-stop-automation",
				ubus_rpc_session: rpc_sess
			}));
		}
	})
}

function start_modem_automation() {
	var rpc_sess = "";
	L.require("rpc").then(function(rpc){
		rpc_sess = rpc.getSessionID()
		if(window.socket_at) {
			window.socket_at.send(JSON.stringify({
				driver_command: "driver-start-automation",
				ubus_rpc_session: rpc_sess
			}));
		}
	})

}

$(function () {
	$('.webconsole').click(function () {
		L.require("rpc").then(function(rpc){
			var rpc_sess = rpc.getSessionID() || ""
			console.log("rpc.getSessionID()",rpc.getSessionID())
			if (rpc_sess.length == 0 && rpc_sess == "00000000000000000000000000000000") {
				return;
			}
		});
		stop_modem_automation();

	    var popup = new PopupView();
	    $('.modal').append(popup.render().el);
		$('body').addClass('modal-overlay-active','');

		function at_validate(comm) {
			if(comm.substring(0,2) == "AT" || comm.substring(0,2) == "at") {
				return { noerror: true, msg: `` }
			} else if(comm.substring(0,4) == "help") {
				return { noerror: true, msg: `` }
			} else if(comm.substring(0,2) == "АТ" || comm.substring(0,2) == "ат") {
				return { noerror: false, msg: `[[;red;]Команда должна вводиться латиницей.` }
			} else {
				return { noerror: false, msg: `[[;red;]Команда должна начинаться с АТ или АТ+, либо "help" для справки.` }
			}
		}


		var socket = window.socket_at;
		$.terminal.defaults.allowedAttributes.push('style');


		$('#terminal').terminal(function(command, term) {
		    socket.onmessage = function(msg) {
				if (msg["data"]) {
					var data = JSON.parse(msg.data)
					if (data["AT_answer"]) {
			        	term.echo(data["AT_answer"].replace("\r\nOK\r\n", "OK\r\n"));
					}
				}
				term.resume();
		    };
		    term.pause();
			var at_check = at_validate(command);
			if (at_check["noerror"] && command == "help")  {
				term.echo(at_check["msg"], {raw: true});
				term.echo(` <dl class="attrs">
								<dt>AT</dt><dd>Проверка отклика модема: OK или ERROR.</dd>
								<dt>AT+CREG?</dt><dd>Статус регистрации СИМ-карты в сети: 0..5.</dd>
								<dt>AT+CSQ</dt><dd>Уровень сигнала и уровень помех (подробнее: AT+CSQ help)</dd>
								<dt>AT+CUSD=1,#100#,15</dt><dd>Запрос баланса Мегафон, МТС (подробнее: AT+CUSD help)</dd>
								<dt>AT+COPS?</dt><dd>Узнать идентификатор GSM-оператора для текущего соединения</dd>
								<dt>AT+CNSMOD?</dt><dd>Узнать тип соединения: 2G/3G/4G и т.п.</dd>
								<dt>&lt;TAB&gt;</dt><dd>Клавиша &lt;TAB&gt; - для автодополнения команды.<br />Двойной &lt;TAB&gt; покажет список вариантов.</dd>
								<dt>&lt;команда&gt; help</dt><dd>Выводит описание значений AT-команды, например введите: "AT+CSQ help"</dd>
							</dl>`, {raw: true});
				term.resume();
			}
			else if (at_check["noerror"] && command == "AT+CREG? help")  {
				term.echo(` <dl class="attrs">
									<table class="bordered">
										<caption>AT+CREG? - Статус регистрации СИМ-карты в сети:</caption>
										<tr><th>Код</th><th>Значение</th></tr>
										<tr><td>0</td><td>Нет регистрации в сети</td></tr>
										<tr><td>1</td><td>Соединение установлено</td></tr>
										<tr><td>2</td><td>Поиск базовой станции</td></tr>
										<tr><td>3</td><td>В регистрации отказано</td></tr>
										<tr><td>4</td><td>Статус регистрации неизвестен</td></tr>
										<tr><td>5</td><td>Соединение установлено в режиме Роуминг"</td></tr>
									</table>
								</dd>
							</dl>`, {raw: true});
				term.resume();
			}
			else if (at_check["noerror"] && command == "AT+CSQ help")  {
				term.echo(` <dl class="attrs">
									<table class="bordered">
										<caption>AT+CSQ - Уровень сигнала от базовой станции и уровень помех:</caption>
										<tr><th>Пример</th><th>Значение</th></tr>
										<tr><td>+CSQ: 22,0</td><td>Уровень сигнала базовой станции: 22. Уровень помех: 0.</td></tr>
										<tr><td>+CSQ: 16,99</td><td>Уровень сигнала базовой станции: 16. Уровень помех: неопределён.</td></tr>
										<tr><td>+CSQ: 99,99</td><td>Уровень сигнала базовой станции: неопределён. Уровень помех: неопределён.</td></tr>
										<tr><td colspan="2" style="color: white;">Примечания</td></tr>
										<tr><td colspan="2">Уровень сигнала - число в диапазоне 0..31<br />
										Уровень помех - число в диапазоне 0..4
										</td></tr>
									</table>
								</dd>
							</dl>`, {raw: true});
				term.resume();
			}
			else if (at_check["noerror"] && command == "AT+CUSD help")  {
				term.echo(` <dl class="attrs">
									<table class="bordered">
										<caption>AT+CUSD - USSD-команда - запрос к GSM-оператору</caption>
										<tr><th>Команда</th><th>Значение</th></tr>
										<tr><td>#100#</td><td>Запросить баланс на СИМ-карте MegaFon, MTS, Yota</td></tr>
										<tr><td>#102#</td><td>Запросить баланс на СИМ-карте Beeline</td></tr>
										<tr><td>#105#</td><td>Запросить баланс на СИМ-карте Tele2</td></tr>
										<tr><td colspan="2" style="color: white;">Примечания</td></tr>
										<tr><td colspan="2">USSD-команда помещается в строке AT-команды, например:<br />
										AT+CUSD=1,#102#,15 (используйте клавишу TAB для автозаполнения)
										</td></tr>
										<tr><td colspan="2">Часто провайдер отменяет USSD-сессию (вместо баланса, приходит ответ вида "+CUSD: 2").<br />
										В таком случае запрос баланса может стать доступным через какое-то время.</td></tr>
									</table>
								</dd>
							</dl>`, {raw: true});
				term.resume();
			}
			else if (at_check["noerror"] && command == "AT+COPS? help")  {
				term.echo(` <dl class="attrs">
									<table class="bordered">
										<caption>AT+COPS? - Идентифицировать GSM-оператора для текущего соединения:</caption>
										<tr><th>Код</th><th>GSM-оператор</th></tr>
										<tr><td>25099</td><td>Beeline</td></tr>
										<tr><td>25001</td><td>MTS</td></tr>
										<tr><td>25002</td><td>MegaFon</td></tr>
										<tr><td>25020</td><td>Tele2</td></tr>
										<tr><td>25011</td><td>Yota</td></tr>
									</table>
								</dd>
							</dl>`, {raw: true});
				term.resume();
			}
			else if (at_check["noerror"] && command == "AT+CNSMOD? help")  {
				term.echo(` <dl class="attrs">
									<table class="bordered">
										<caption>AT+CNSMOD? - Узнать тип соединения: 2G/3G/4G и т.п.</caption>
										<tr><th>Код</th><th>Значение</th></tr>
										<tr><td>0</td><td>no service</td></tr>
										<tr><td>1</td><td>GSM | 2G</td></tr>
										<tr><td>2</td><td>GPRS | 2G</td></tr>
										<tr><td>3</td><td>EDGE | 2G</td></tr>
										<tr><td>4</td><td>WCDMA | 3G</td></tr>
										<tr><td>5</td><td>HSDPA | 3G</td></tr>
										<tr><td>6</td><td>HSUPA | 3G</td></tr>
										<tr><td>7</td><td>HSPA | 3G</td></tr>
										<tr><td>8</td><td>LTE | 4G</td></tr>
										<tr><td>9</td><td>TDS-CDMA | 3G</td></tr>
										<tr><td>10</td><td>TDS-HSDPA | 3G</td></tr>
										<tr><td>11</td><td>TDS-HSUPA | 3G</td></tr>
										<tr><td>12</td><td>TDS-HSPA | 3G</td></tr>
										<tr><td>13</td><td>CDMA | 3G</td></tr>
										<tr><td>14</td><td>EVDO | 3G</td></tr>
										<tr><td>15</td><td>HYBRID (CDMA and EVDO) | 3G</td></tr>
										<tr><td>16</td><td>1XLTE | 3G</td></tr>
										<tr><td>23</td><td>Ehrpd | 3G</td></tr>
										<tr><td>24</td><td>HYBRID (CDMA and Ehrpd) | 3G</td></tr>
									</table>
								</dd>
							</dl>`, {raw: true});
				term.resume();
			}
			else if (at_check["noerror"] && command.substring(command.length-4) == "help")  {
				term.echo(` <dl class="attrs">
									<table class="bordered">
										<caption>В справочнике ещё нет информации по данной команде:</caption>
										<tr><td class="no-info"></td></tr>
									</table>
								</dd>
							</dl>`, {raw: true});
				$(".no-info").text(command.substring(0, command.length-5))
				term.resume();
			}
			else if (at_check["noerror"] == false && at_check["msg"].length > 0) {
				term.echo(at_check["msg"]);
				term.resume();
			}
			else if (at_check["noerror"] && at_check["msg"].length == 0) {
				socket.send(JSON.stringify({ AT_command: command }));
				term.resume();
			} else {
				term.resume();
			}
		},
		{
			height: 400,
			greetings: welcome + 'Терминал доступа к модему по протоколу АТ\r\n',
			prompt: "[[b;#ffffff;]&gt;] ",
			tabcompletion: true,
			completion: ['AT+CREG?', 'AT+CSQ', 'AT+CUSD=1,#100#,15', 'AT+CUSD=1,#102#,15', 'AT+COPS?', 'AT+CNSMOD?']
		});
	});
});


var PopupView = Backbone.View.extend({
	className: 'cbi-map',
	events: {
			'click .popup-close': 'close',
	},
	initialize: function() {
		this.template = $('#web-console').html();
		this.context = {
			title: "Консоль модема (протокол АТ)",
			//content: "My first content"
		}
	},

	render: function() {
		var tmpl = window.underscore.template(this.template)
		$(this.el).html(tmpl(this.context));

		// Делаем декущий попап активным
		$('.popup-active').removeClass('popup-active');
		$(this.el).addClass('popup-active');
		return this;
	},

	close: function () {
	    $(this.el).remove();
		$('body').removeClass('modal-overlay-active');
		start_modem_automation()
	}
});

$( document ).ready(function() {
	start_modem_automation();

	// Do fake poll to keep session alive untill the user on the SIM-list page
	L.require("rpc").then(function(rpc) {
		L.require("poll").then(function(poll) {
			var callLuciConntrackList = rpc.declare({
				object: 'luci',
				method: 'getConntrackList',
				expect: { result: [] }
			});

			var pollData = function() {
				poll.add(L.bind(function() {
					var tasks = [
						L.resolveDefault(callLuciConntrackList(), [])
					];
					return Promise.all(tasks).then(L.bind(function(datasets) {
						// Do nothing, as it's the fake poll
					}));
				}));
			};

			pollData();
		});
	});
});


//]]>
</script>
